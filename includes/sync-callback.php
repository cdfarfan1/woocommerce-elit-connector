<?php
if (!defined('ABSPATH')) {
    exit;
}

function nb_callback($syncDescription = false) {
    try {
        error_log('nb_callback ejecutado a las: ' . date('Y-m-d H:i:s'));

        // Guardar límites originales
        $original_max_execution_time = ini_get('max_execution_time');
        $original_memory_limit = ini_get('memory_limit');

        // Establecer nuevos límites
        ini_set('max_execution_time', '1800'); // 30 minutos
        ini_set('memory_limit', '2048M'); // 2 GB

        $start_time = microtime(true);

        $token = nb_get_token();
        if (!$token) {
            return 'No fue posible obtener el token.';
        }

        $url = API_URL_NB . '/';
        $args = array(
            'headers'  => array(
                'Authorization' => 'Bearer ' . $token,
                'Content-Type'  => 'application/json'
            ),
            'timeout'  => 30,
            'blocking' => true,
        );

        $response = wp_remote_get($url, $args);

        if (is_wp_error($response)) {
            return 'Error en la solicitud de productos: ' . $response->get_error_message();
        }

        $body = wp_remote_retrieve_body($response);
        $json = json_decode($body, true);

        if (json_last_error() !== JSON_ERROR_NONE) {
            return 'Error al decodificar JSON: ' . json_last_error_msg();
        }

        // Obtener todos los SKUs existentes
        $prefix = get_option('nb_prefix');
        $existing_skus = array();

        foreach ($json as $row) {
            $existing_skus[] = $prefix . $row['sku'];
        }

        // Eliminar productos que no están en la respuesta
        $delete_result = nb_delete_products_by_prefix($existing_skus, $prefix);

        $updated_count = 0;
        $created_count = 0;
        $categories_cache = array();

        $sync_no_iva = get_option('nb_sync_no_iva');
        $sync_usd = get_option('nb_sync_usd');

        foreach ($json as $row) {
            $id = null;
            $sku = $prefix . $row['sku'];

            // Verificar si el SKU ya existe
            $existing_product_id = wc_get_product_id_by_sku($sku);

            if ($existing_product_id) {
                $id = $existing_product_id;
                $updated_count++;
            } elseif ($row['amountStock'] > 0 && !empty($row['sku'])) {
                $product_data = array(
                    'post_title'   => $row['title'],
                    'post_type'    => 'product',
                    'post_status'  => 'publish',
                );
                $id = wp_insert_post($product_data);
                $created_count++;
            }

            if ($id) {
                try {
                    // Calcular precio
                    if ($sync_usd) {
                        $price = $sync_no_iva ? $row['price']['value'] : $row['price']['finalPriceWithUtility'];
                    } else {
                        $price = $sync_no_iva
                            ? $row['price']['value'] * $row['cotizacion']
                            : $row['price']['finalPriceWithUtility'] * $row['cotizacion'];
                    }

                    // Aplicar markup
                    $price = nb_calculate_price_with_markup($price);

                    $product = wc_get_product($id);
                    $product->set_sku($sku);

                    // Manejar imágenes usando FIFU
                    if ((is_plugin_active('featured-image-from-url/featured-image-from-url.php') || 
                         is_plugin_active('fifu-premium/fifu-premium.php'))) {
                        
                        // Priorizar mainImageExp, luego mainImage
                        $image_url = !empty($row['mainImageExp']) ? $row['mainImageExp'] : 
                                    (isset($row['mainImage']) ? $row['mainImage'] : null);

                        if (!empty($image_url)) {
                            fifu_dev_set_image($id, $image_url);
                            error_log("FIFU: Imagen establecida para producto ID: $id, URL: $image_url");
                        }
                    }

                    // Sincronizar descripción si está activado
                    if ($syncDescription) {
                        $description_url = API_URL_NB . '/autoGeneratedDescription/' . (int)$row['id'];
                        $description_args = array(
                            'headers'  => array(
                                'Authorization' => 'Bearer ' . $token,
                                'Content-Type'  => 'application/json'
                            ),
                            'timeout'  => 30,
                            'blocking' => true,
                        );

                        $description_response = wp_remote_get($description_url, $description_args);

                        if (!is_wp_error($description_response)) {
                            $description_body = wp_remote_retrieve_body($description_response);
                            $description_json = json_decode($description_body, true);

                            if (json_last_error() === JSON_ERROR_NONE && isset($description_json['description'])) {
                                // Obtener descripción adicional desde la opción
                                $additional_description = get_option('nb_description', '');
                                
                                // Combinar descripciones
                                $full_description = $additional_description . ' ' . $description_json['description'];
                                
                                // Establecer la descripción completa
                                $product->set_description($full_description);
                                error_log("Descripción actualizada para producto ID: $id");
                            }
                        }
                    }

                    // Resto del código de sincronización...
                    // [Mantener el código existente para categorías, descripción, etc.]

                    $product->set_regular_price($price);
                    $product->save();

                } catch (Exception $e) {
                    error_log('Error al procesar producto ' . $sku . ': ' . $e->getMessage());
                    continue;
                }
            }
        }

        update_option('nb_last_update', date('Y-m-d H:i:s'));

        $end_time = microtime(true);
        $execution_time = $end_time - $start_time;

        return sprintf(
            'Actualización completada: %d actualizados, %d nuevos, %d eliminados. Tiempo: %.2f segundos.',
            $updated_count,
            $created_count,
            isset($delete_result['deleted']) ? $delete_result['deleted'] : 0,
            $execution_time
        );

    } catch (Exception $e) {
        error_log('Error en nb_callback: ' . $e->getMessage());
        return 'Error: ' . $e->getMessage();
    } finally {
        ini_set('max_execution_time', $original_max_execution_time);
        ini_set('memory_limit', $original_memory_limit);
    }
} 